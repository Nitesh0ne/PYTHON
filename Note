****************Python************************
Session 1:

Why python ? What is python ? 

- python is general purpose , high level programming language.
- python is dynamically typed language i,e don't have to mention the data type of vaiable 

"The complete Monte python Circus"

Why is python. 
- simple and easy to learn, there is only 30+ keyword 
- Python is Freeware and opensource 
    Freeware : we do to have to pay any money to use the python
    Opensource: Source code of python is openly avalibale
- python is platform independent
-  Interpreted language
- python is portable 
- python is extensible 
    python + java = jython
- python is embedded 

* Interpreted vd Complied langauge
* anaconda python

=================================================
Session 2:

Identifiers : name given to variable , function , method , class 

Naming Convention:
- allowed character a-z, A-Z, 0-9 and _  only.
- cannot start with digit.
- Identifier are case Sensitive.
- Reserved word are not allowed

* _a    = Private variables
* __a   = protected variables
* __a__ = Magic vaiables, Dunder Variables


Reserved words:  cannot use as  identifers.
 List the total keyword in python.   
    import keyword
    print(keyword.kwlist) 


Data Types : what type of the data is like integer, float , character, string but in  python we do not define the data type. That's why it is dynamically typed

- there are total 14 data types in python 
1.Integer, 2.Float, 3.Complex, 4.Boolean, 5.String, 6.Byte, 7.ByteArray, 8.Range, 9.List, 10.Tuple, 11.Set, 12.FrozenSet, 13.Dictionary, 14.None

1. Integer 
- can be represented as binary, decimal, octal or hexadecimal
    binary 0b10101 , ocatal 0o1234, decimal 243, hexadeximal 0xf45

can be represented in binary , octal , decimal and hexadecimal form 
example:
a = 10     : decimal     form
a = 0b1010 : binary      form 
a = 0o12   : Octal       form
a = 0xa    : Hexadecimal form 

default is decimal, 
Base conversion method.
bin() // binary 
oct() // oct
hex() // hexadecimal

2. Float : there is decimal number e.g 10.023 

a = 1.2e3 (i,e 1.2 * 10 ko power 3)

==============================================
session 3:
3. Complex :
    complex number = in the form of (a + bj) e.g 1+2j 

4. Boolean : True, False  are boolean data type
    True = 1, False = 0 
    None is nonetype data type

5. String :  Collection of character.

"""
doc 
string
"""

Slicing  of String :


# Type Casting : converting one data type into another
Fundamental data type : int, float, complex, bool, string

# Fundamental data types vs Immutability 

- All fundamental data types are immutable. Once we create an object, we cannot perform any changes in that object. If we try to change, with those changes a new object is created
e,g 
a = 10 
print(id(a))
  
a =20
print(id(a))

garbage collector detroy the a =10 

===========================================================
Session 4 :
Collection related datatype:
list, tuple, set, frozenset, dict, range, bytes, bytesarray

1. List =  insertion order are preserved, duplicate values are allowed, heteregenous object are allowed.
e.g list_name = [12, 10.5 "value2", 12]
    list_name = [] # empty list
someof method in list:
    append(), remove(), 

2. Tuple : Exactly as list but immutable.
    e.g tuple_name = (1,) : , is necessary

3. Set : Duplicate value are allowed and insertion order are not preserved

4. Frozenset = ther are immutable
 set is mutable and frozen set is immutable 
 
 fs= frozenset(s)

5. Dictionary: 
        key vlaue pair

6. Range: sequence of number

7. bytes : Collection of bytes. 


e.g b = [10,20,30,40]
by = bytes[b]
print  (type(by))

8. None

===============================================
Session 5:

Escape Sequensce

>  there is no provision of constant variable in python . but in python there a practice of  making constant  variable by representating variable by Capital letter.

MAX_VALUE = 10 // constant variable 

Comment in python 
 # is used for python 

 no multi line python 

 \n = new line 
 \t = tab 
 \r = cariage return 
 \b = backspace
 \v = vertical tab
 \' = single quotation
 

--------------------------------

Operator in python
1. Arithmetic Operator 
2. Relational Operator / Comparison Operator
3. Logical Operator 
4. Bitwise Operator
5. Assignment Operator
6. Equality Operator 
7. Shift Operator 
8. Ternary Operator
9. Special Operator 
    i. Identity Operator 
    ii. Membership Operator

1. Arithmetic Operator:
    - Addittion = + 
    - subtraction = - 
    - Multiplication = * 
    -  Division = /
    - Moudlo = % 
    - Floor division =//
    - Power operator = ** 
2. Reltional Operator:
    ord("A") : print the ascii value of A 
    
    Chainig of Relational Operator:  
    e.g 10<20<30<40<50 

3. Logical Operator :  and or  not 
 if x is true then y : result x
 if x is false then y : result y 


 4. Bitwise Operator: 
    

6. Equality Operator: == , !=
====================================================
Sesssion 6


7. Ternary Operator / conditional Operator :
    came with three operand

    syntax:
    x = <value_if _true> if <condition> else <vlaue_if_false>
    e,g a = 20 if 20>30 else 30

Nesting od ternary operator

max = <first_num> if <first_num> > <second_num> and <first_num> > <third_num> else  <second_num> if <second_num> > <thrid_num> else <thid_num>

8. Special Operator: 
    i. Identity Operator: 
        a. is 
        b. is not 
        both are used for address comparison of variable 

        is vs == 
        is check the address of variable while == check the value of variable. 

    ii. Membership Operator:
        a. in 
        b. not in 

# operator precedence
precedence 
1. ()
2. **
3. ~
4. 
# precedence and assoxiativity

Math Module:

===========================================================
Session 7: 

Python Input"
split() = function

> List Comprehensive 
> Unpacking Of List
> eval function

> Command line Argument
# NOTE : IN COMMAND LINE ARGUMENT ALWAYS USE DOUBLE QUOTATION FOR STRING

# assignment = argparse

python output statement 
using print() function
> string concatenation and string repetition
 String Concatenatio= + 
 String Repetition = $* 

 sep="|" : seperator
 end=" "

===========================================================
Session 8 
Flow Control In python
    in python flow control of code is managed by indentation

1. conditional Statement 
    if, if-elif , if-elif-else, if-elif
    switch
2. Iterative statement /Loop
    for and while 
3. Transfer Statement
     break and continue

1. Conditionsal statement
    i. if <condition>:
             code
    ii. if <condition>:
            if condition is true
        else:
            if condition is false
    iii. if <condition 1>:
            if condition1 is true
        elif <condition 2>: 
            if condition 2 is true
        else:
            if all avobe condition is false
# Assignment           
# WAP to find smallest of given 2 numbers
# WAP to find smallest of given 3 numbers
# WAP to find given number is odd or even
2 Switch Statemnt 


sub = input("Enter  a fav sub of Engineering :")

# # match sub:
# #     case "DSA":
# #         print("")
# #     case "MAth":
# #         print("")
# #     case _:
# #         print("no subject")

# assignment = upto one trillion

==================================================
Session 9:
Iterative Statement(Loop)
there is no provision of do while loop in python

1. FOR LOOP  (used when the no of iteration is fixed and wll  known)

syntax: for x in sequence:
            code

2. While LOop(Loop run until the condition is true )

3. infinite loop :

4. Nested Loop:

5.  Loop with else block (else will run when loop is executed)
for x in sequence:

else
    
# Transefer Statement
1. break : brak the loop 
2. continue : skip the loop
3. pass 
4. del statement : used to delete the refrence , does not delete the object
5. None 
6. difference between None and del
    None : 
    del  :

assignment : 
WAP to print prime number , string number , palindrome number, oerfect number , armstring number, fibonacci number, hasrshad (niven) number, twin number , trianglur number,

==========================================================
Session 10:
String :
Enclose with '' , double "" , or triple '''''',
triple '''df''' = it is called doc strign


Accessing the characters of a string:
    indexing and slicing

string repetation :
sstring concatenation:

===============================================================
===========================================================
session 12 
Tuple:
- exactly as list, but llist is mutable while tuple is immutable
- Read Only list 
- Insertion order is preserved
- Duplicate and heterogenous data are allowed
- Indexing and slicing is applicable


Accessing Tuple element:
1. by Indexing :
2. By Slicing :
because if  insertion order is preserved so idexing ans slicing is possible.

Tuple bs Immutability:
once we created a tuple it is fixed we cannot change the element of it 

Mathematical Operator for tuple
- concatenation + 
- Repetation * 
- Equality == , =!
- Membership  in ,not in
- Relational Operator <,>,<=,>=

Some Important Function of Tuple

len(tuple_name) : return the length of tuple
tuple_name.count(element): return the no of element present in the tuple 

tuple_name.index(element) : return the index number of the element present in the tuple
r= 

sorted(tuple_name) : return the  tuple in ascending order
sorred(tuple_name, reversed=True) : return the tuple in descending true

min(tuple_name) : return the minimum value of tuple
max(tuple_name) : return  the maximum value of tuple


# packing and unpacking of tuple
a= 10 
b = 20 
c = 30 
d = 40 
e = 50 

t = a,b,c,d # packing of tuple 

# unpcaking of tuple
fruits = ("apple", "banana", "cherry")
(green, yellow, red) = fruits

# Tuple Comprehensive 
     tupel comrehsive is not possible 

# Difference between List  and Tuple 
list   Tuple 


=========================================================
Session 13 
Set in Python 

- Duplicate are not allowed 
- Insertion Order is not presercved
- used  when 
- set is mutable 
Important function of Set 

 deep copy and sallow copy 

 set_name.pop()
 set_name.remove(element) : give the error if element is not present
 set_name.discard(element) : does not give erroe if element is not present 
 set_name.clear() : clear the set

Mathematical Operation on set

Union : s1.union(s2)
Intersection : s1.intersection(s2)
Difference : s1.difference(s2)
Symmetric Difference (xor): s1.symmetric_difference(s2)

Membership Operator : in and not in 

No provision of Mathematical Operator like + , * and comparison operator <,>etc

Set Comprehensive: The Process of creating set.

s = {x for  x in range(40) of  x%2==0}

- Indexing and Slicing is not applicable
-
======================================================
Dictionary in python:
Key value 
- duplicate value are allowed.
- if key is duplicated, then the value is replaced by latest value.
- Heterogenous  element are allowed for both key and value 
- insertion order is not preserved, so indexing and slicing is not possible


# Accessing the element of dictionary
 =====================================================
 session 14
 Function in Python:

 - DRY Principle 
 - Code Reusability.
 
 TYpes of Function :
1. built-in Function : define by pyhton 
2. user-define Function : define by user 

def function_name (parameter):
    '''doc string'''
    function body
    function body
    function body
    return value

 function parameter : parameter is define when function is defined 

 function argument : argument is pass when function is call

 Function Argument :
 there are 4 types of argument 
 1. positional arguments  : argument are passed to parameer based on their position.

 2. keyword arguments : argument are passed based on the key
 
 while  passing positional and keyword argument,    positional argument should be given first and keyword argument

 3. default arguments : default argument should be define at the last
 
 4. variable length arguments : 
 *args : variable length arguments
 **kwargs : variable length keyword arguments



=========================================================
Session 15

Types of Variable in Functional Programming

1. Global variable : define outside the function 
2. Local Variable : define inside the function

globld()


Recursive Function : 

maximum recursive depth 

lamda function
=======================================================
Session 16 :
Modules 

- For code Reusability 
- length of code is decreade and Readability increase
- Member aliasing 
- Module aliasing



Various possibilities of import 
1. import moudule_name
2. import moudlename1, module_name2
3. import moudule_name as module 
4. imoort moudule_name as m 


Module conflict:


Reloading of Module


===========================================================
session18

===========================================================
session 19

===========================================================
Session 21 :

Garbage Collector: 

import sys
print(sys.getrefcount(t))




===========================================================
Session 22: 
IS_A Relation (InHeritance)

The process of creating a new classes based on some existing class is called inheritance



SOme Rules 
1.  Create object of child class always